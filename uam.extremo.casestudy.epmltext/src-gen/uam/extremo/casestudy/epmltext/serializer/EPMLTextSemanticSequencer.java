/*
 * generated by Xtext 2.12.0
 */
package uam.extremo.casestudy.epmltext.serializer;

import com.google.inject.Inject;
import epml.Application;
import epml.CommunicationCable;
import epml.DCEngine;
import epml.EpmlPackage;
import epml.Fieldbus;
import epml.InductiveProximitySwitch;
import epml.InputPort;
import epml.OutputPort;
import epml.PCBasedControls;
import epml.ReadyMadeDataCable;
import epml.RectangularConnectorSet;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.ALTERNATIVEUNITS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.ANYTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.APOSTERIORICASEOF;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.APOSTERIORISEMANTICRELATIONSHIP;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.APOSTERIORISEMANTICRELATIONSHIPS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.APOSTERIORIVIEWOF;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.ARRAYTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.ASSIGNEDVALUE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.AUTHORS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.AXIS1PLACEMENTTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.AXIS2PLACEMENT2DTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.AXIS2PLACEMENT3DTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.BAGTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.BOOLEANTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CARDINALITYCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CATEGORIZATIONCLASS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CLASS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CLASSCONSTANTVALUES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CLASSCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CLASSESREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CLASSREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CLASSREFERENCETYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CLASSVALUEASSIGNMENT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONDITIONDET;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONFIGURATIONCONTROLCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONSTRAINTORCONSTRAINTID;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONSTRAINTS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDCLASSES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDDATATYPES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDDOCUMENTS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDPROPERTIES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDSUPPLIERS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTEXTDEPENDENTUNIT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTEXTPARAMETERCONSTRAINTS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTEXTRESTRICTIONCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONVERSIONBASEDUNIT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CORRESPONDINGPROPERTIES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DATATYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DATATYPEREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DATATYPESREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DATEDATATYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DATETIMEDATATYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DEPENDENTPDET;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DERIVEDUNIT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DERIVEDUNITELEMENT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DICTIONARIESREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DICTIONARYREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DICUNIT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DICUNITREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DICUNITSREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DICVALUE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DIMENSIONALEXPONENTS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DOCUMENT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DOCUMENTCONTENT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DOCUMENTIDENTIFIER;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DOCUMENTIDENTIFIERNAMELABEL;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DOCUMENTREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DOCUMENTSREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DOMAINCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DOMAINCONSTRAINTS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.ENUMERATIONCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.EXTERNALFILES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.EXTERNALGRAPHICS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.FILTER;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.FMCLASSVIEWOF;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.FUNCTIONALMODELCLASS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.GENERALTEXT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.GEOMETRICCONTEXT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.GEOMETRICUNITCONTEXT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.GRAPHICS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.HTTPFILE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.IDENTIFIEDDOCUMENT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.INTCURRENCYTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.INTDICVALUE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.INTEGRITYCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.INTMEASURETYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.INTTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.ITEMCLASS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.ITEMCLASSCASEOF;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.ITSVALUES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.KEYWORD;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.KEYWORDLABEL;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.LANGUAGE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.LEVEL;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.LEVELTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.LISTTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.MAPPINGFUNCTION;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.MATHEMATICALSTRING;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.NAMEDTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.NAMEDUNIT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.NONDEPENDENTPDET;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.NONINSTANTIABLEFUNCTIONALVIEWCLASS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.NONQUANTITATIVECODETYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.NONQUANTITATIVEINTTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.NONSIUNIT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.NONTRANSLATABLESTRINGTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.NUMBERTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.ORGANIZATION;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PERSON;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PLACEMENTTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.POSTCONDITION;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PRECONDITION;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PREFERREDNAME;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PREFERREDNAMELABEL;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PROGRAMREFERENCETYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PROPERTIESREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PROPERTY;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PROPERTYCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PROPERTYMAPPING;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.PROPERTYREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.RANGECONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.RATIONALMEASURETYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.RATIONALTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.REALCURRENCYTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.REALMEASURETYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.REALTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.REFERENCEDDOCUMENT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.REFERENCEDGRAPHICS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.REPRESENTATIONPDET;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.REPRESENTATIONREFERENCETYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SETTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SETWITHSUBSETCONSTRAINTTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SHORTNAME;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SHORTNAMELABEL;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SIUNIT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SOURCEDOCUMENT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.STRINGDICVALUE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.STRINGPATTERNCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.STRINGS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.STRINGSIZECONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.STRINGTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SUBCLASSCONSTRAINT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SUBSET;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SUPPLIER;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SUPPLIERREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SYNONYMOUSNAME;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SYNONYMOUSNAMELABEL;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SYNONYMOUSSYMBOLS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.TEXT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.TIMEDATATYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.TRANSLATABLESTRINGTYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.TRANSLATION;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.TRANSLATIONDATA;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.UNIT;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.URITYPE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.VCVRANGE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.VIEWCONTROLVARIABLERANGE;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uam.extremo.casestudy.epmltext.services.EPMLTextGrammarAccess;

@SuppressWarnings("all")
public class EPMLTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EPMLTextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EpmlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EpmlPackage.APPLICATION:
				sequence_Application(context, (Application) semanticObject); 
				return; 
			case EpmlPackage.COMMUNICATION_CABLE:
				sequence_CommunicationCable(context, (CommunicationCable) semanticObject); 
				return; 
			case EpmlPackage.DC_ENGINE:
				sequence_DCEngine(context, (DCEngine) semanticObject); 
				return; 
			case EpmlPackage.FIELDBUS:
				sequence_Fieldbus(context, (Fieldbus) semanticObject); 
				return; 
			case EpmlPackage.INDUCTIVE_PROXIMITY_SWITCH:
				sequence_InductiveProximitySwitch(context, (InductiveProximitySwitch) semanticObject); 
				return; 
			case EpmlPackage.INPUT_PORT:
				sequence_InputPort(context, (InputPort) semanticObject); 
				return; 
			case EpmlPackage.OUTPUT_PORT:
				sequence_OutputPort(context, (OutputPort) semanticObject); 
				return; 
			case EpmlPackage.PC_BASED_CONTROLS:
				sequence_PCBasedControls(context, (PCBasedControls) semanticObject); 
				return; 
			case EpmlPackage.READY_MADE_DATA_CABLE:
				sequence_ReadyMadeDataCable(context, (ReadyMadeDataCable) semanticObject); 
				return; 
			case EpmlPackage.RECTANGULAR_CONNECTOR_SET:
				sequence_RectangularConnectorSet(context, (RectangularConnectorSet) semanticObject); 
				return; 
			case EpmlPackage.SYSTEM:
				sequence_System(context, (epml.System) semanticObject); 
				return; 
			}
		else if (epackage == Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.ALTERNATIVEUNITS:
				sequence_ALTERNATIVEUNITS(context, (ALTERNATIVEUNITS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.ANYTYPE:
				sequence_ANYTYPE_Impl(context, (ANYTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.APOSTERIORICASEOF:
				sequence_APOSTERIORICASEOF(context, (APOSTERIORICASEOF) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.APOSTERIORISEMANTICRELATIONSHIP:
				sequence_APOSTERIORISEMANTICRELATIONSHIP_Impl(context, (APOSTERIORISEMANTICRELATIONSHIP) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.APOSTERIORISEMANTICRELATIONSHIPS:
				sequence_APOSTERIORISEMANTICRELATIONSHIPS(context, (APOSTERIORISEMANTICRELATIONSHIPS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.APOSTERIORIVIEWOF:
				sequence_APOSTERIORIVIEWOF(context, (APOSTERIORIVIEWOF) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.ARRAYTYPE:
				sequence_ARRAYTYPE(context, (ARRAYTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.ASSIGNEDVALUE:
				sequence_ASSIGNEDVALUE(context, (ASSIGNEDVALUE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.AUTHORS:
				sequence_AUTHORS(context, (AUTHORS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.AXIS1PLACEMENTTYPE:
				sequence_AXIS1PLACEMENTTYPE(context, (AXIS1PLACEMENTTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.AXIS2PLACEMENT2DTYPE:
				sequence_AXIS2PLACEMENT2DTYPE(context, (AXIS2PLACEMENT2DTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.AXIS2PLACEMENT3DTYPE:
				sequence_AXIS2PLACEMENT3DTYPE(context, (AXIS2PLACEMENT3DTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.BAGTYPE:
				sequence_BAGTYPE(context, (BAGTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.BOOLEANTYPE:
				sequence_BOOLEANTYPE(context, (BOOLEANTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CARDINALITYCONSTRAINT:
				sequence_CARDINALITYCONSTRAINT(context, (CARDINALITYCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CATEGORIZATIONCLASS:
				sequence_CATEGORIZATIONCLASS(context, (CATEGORIZATIONCLASS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CLASS:
				sequence_CLASS_Impl(context, (CLASS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CLASSCONSTANTVALUES:
				sequence_CLASSCONSTANTVALUES(context, (CLASSCONSTANTVALUES) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CLASSCONSTRAINT:
				sequence_CLASSCONSTRAINT_Impl(context, (CLASSCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CLASSESREFERENCE:
				sequence_CLASSESREFERENCE(context, (CLASSESREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CLASSREFERENCE:
				sequence_CLASSREFERENCE(context, (CLASSREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CLASSREFERENCETYPE:
				sequence_CLASSREFERENCETYPE(context, (CLASSREFERENCETYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CLASSVALUEASSIGNMENT:
				sequence_CLASSVALUEASSIGNMENT(context, (CLASSVALUEASSIGNMENT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONDITIONDET:
				sequence_CONDITIONDET(context, (CONDITIONDET) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONFIGURATIONCONTROLCONSTRAINT:
				sequence_CONFIGURATIONCONTROLCONSTRAINT(context, (CONFIGURATIONCONTROLCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONSTRAINT:
				sequence_CONSTRAINT_Impl(context, (CONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONSTRAINTORCONSTRAINTID:
				sequence_CONSTRAINTORCONSTRAINTID(context, (CONSTRAINTORCONSTRAINTID) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONSTRAINTS:
				sequence_CONSTRAINTS(context, (CONSTRAINTS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONTAINEDCLASSES:
				sequence_CONTAINEDCLASSES(context, (CONTAINEDCLASSES) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONTAINEDDATATYPES:
				sequence_CONTAINEDDATATYPES(context, (CONTAINEDDATATYPES) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONTAINEDDOCUMENTS:
				sequence_CONTAINEDDOCUMENTS(context, (CONTAINEDDOCUMENTS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONTAINEDPROPERTIES:
				sequence_CONTAINEDPROPERTIES(context, (CONTAINEDPROPERTIES) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONTAINEDSUPPLIERS:
				sequence_CONTAINEDSUPPLIERS(context, (CONTAINEDSUPPLIERS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONTEXTDEPENDENTUNIT:
				sequence_CONTEXTDEPENDENTUNIT(context, (CONTEXTDEPENDENTUNIT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONTEXTPARAMETERCONSTRAINTS:
				sequence_CONTEXTPARAMETERCONSTRAINTS(context, (CONTEXTPARAMETERCONSTRAINTS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONTEXTRESTRICTIONCONSTRAINT:
				sequence_CONTEXTRESTRICTIONCONSTRAINT(context, (CONTEXTRESTRICTIONCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CONVERSIONBASEDUNIT:
				sequence_CONVERSIONBASEDUNIT(context, (CONVERSIONBASEDUNIT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.CORRESPONDINGPROPERTIES:
				sequence_CORRESPONDINGPROPERTIES(context, (CORRESPONDINGPROPERTIES) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DATATYPE:
				sequence_DATATYPE(context, (DATATYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DATATYPEREFERENCE:
				sequence_DATATYPEREFERENCE(context, (DATATYPEREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DATATYPESREFERENCE:
				sequence_DATATYPESREFERENCE(context, (DATATYPESREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DATEDATATYPE:
				sequence_DATEDATATYPE(context, (DATEDATATYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DATETIMEDATATYPE:
				sequence_DATETIMEDATATYPE(context, (DATETIMEDATATYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DEPENDENTPDET:
				sequence_DEPENDENTPDET(context, (DEPENDENTPDET) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DERIVEDUNIT:
				sequence_DERIVEDUNIT(context, (DERIVEDUNIT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DERIVEDUNITELEMENT:
				sequence_DERIVEDUNITELEMENT(context, (DERIVEDUNITELEMENT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DICTIONARIESREFERENCE:
				sequence_DICTIONARIESREFERENCE(context, (DICTIONARIESREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DICTIONARYREFERENCE:
				sequence_DICTIONARYREFERENCE(context, (DICTIONARYREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DICUNIT:
				sequence_DICUNIT(context, (DICUNIT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DICUNITREFERENCE:
				sequence_DICUNITREFERENCE(context, (DICUNITREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DICUNITSREFERENCE:
				sequence_DICUNITSREFERENCE(context, (DICUNITSREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DICVALUE:
				sequence_DICVALUE_Impl(context, (DICVALUE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DIMENSIONALEXPONENTS:
				sequence_DIMENSIONALEXPONENTS(context, (DIMENSIONALEXPONENTS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DOCUMENT:
				sequence_DOCUMENT(context, (DOCUMENT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DOCUMENTCONTENT:
				sequence_DOCUMENTCONTENT(context, (DOCUMENTCONTENT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DOCUMENTIDENTIFIER:
				sequence_DOCUMENTIDENTIFIER(context, (DOCUMENTIDENTIFIER) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DOCUMENTIDENTIFIERNAMELABEL:
				sequence_DOCUMENTIDENTIFIERNAMELABEL(context, (DOCUMENTIDENTIFIERNAMELABEL) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DOCUMENTREFERENCE:
				sequence_DOCUMENTREFERENCE(context, (DOCUMENTREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DOCUMENTSREFERENCE:
				sequence_DOCUMENTSREFERENCE(context, (DOCUMENTSREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DOMAINCONSTRAINT:
				sequence_DOMAINCONSTRAINT_Impl(context, (DOMAINCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.DOMAINCONSTRAINTS:
				sequence_DOMAINCONSTRAINTS(context, (DOMAINCONSTRAINTS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.ENUMERATIONCONSTRAINT:
				sequence_ENUMERATIONCONSTRAINT(context, (ENUMERATIONCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.EXTERNALFILES:
				sequence_EXTERNALFILES(context, (EXTERNALFILES) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.EXTERNALGRAPHICS:
				sequence_EXTERNALGRAPHICS(context, (EXTERNALGRAPHICS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.FILTER:
				sequence_FILTER(context, (FILTER) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.FMCLASSVIEWOF:
				sequence_FMCLASSVIEWOF(context, (FMCLASSVIEWOF) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.FUNCTIONALMODELCLASS:
				sequence_FUNCTIONALMODELCLASS(context, (FUNCTIONALMODELCLASS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.GENERALTEXT:
				sequence_GENERALTEXT(context, (GENERALTEXT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.GEOMETRICCONTEXT:
				sequence_GEOMETRICCONTEXT(context, (GEOMETRICCONTEXT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.GEOMETRICUNITCONTEXT:
				sequence_GEOMETRICUNITCONTEXT(context, (GEOMETRICUNITCONTEXT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.GRAPHICS:
				sequence_GRAPHICS_Impl(context, (GRAPHICS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.HTTPFILE:
				sequence_HTTPFILE(context, (HTTPFILE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.IDENTIFIEDDOCUMENT:
				sequence_IDENTIFIEDDOCUMENT(context, (IDENTIFIEDDOCUMENT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.INTCURRENCYTYPE:
				sequence_INTCURRENCYTYPE(context, (INTCURRENCYTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.INTDICVALUE:
				sequence_INTDICVALUE(context, (INTDICVALUE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.INTEGRITYCONSTRAINT:
				sequence_INTEGRITYCONSTRAINT(context, (INTEGRITYCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.INTMEASURETYPE:
				sequence_INTMEASURETYPE(context, (INTMEASURETYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.INTTYPE:
				sequence_INTTYPE(context, (INTTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.ITEMCLASS:
				sequence_ITEMCLASS(context, (ITEMCLASS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.ITEMCLASSCASEOF:
				sequence_ITEMCLASSCASEOF(context, (ITEMCLASSCASEOF) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.ITSVALUES:
				sequence_ITSVALUES(context, (ITSVALUES) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.KEYWORD:
				sequence_KEYWORD(context, (KEYWORD) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.KEYWORDLABEL:
				sequence_KEYWORDLABEL(context, (KEYWORDLABEL) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.LANGUAGE:
				sequence_LANGUAGE(context, (LANGUAGE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.LEVEL:
				sequence_LEVEL(context, (LEVEL) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.LEVELTYPE:
				sequence_LEVELTYPE(context, (LEVELTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.LISTTYPE:
				sequence_LISTTYPE(context, (LISTTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.MAPPINGFUNCTION:
				sequence_MAPPINGFUNCTION(context, (MAPPINGFUNCTION) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.MATHEMATICALSTRING:
				sequence_MATHEMATICALSTRING(context, (MATHEMATICALSTRING) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.NAMEDTYPE:
				sequence_NAMEDTYPE(context, (NAMEDTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.NAMEDUNIT:
				sequence_NAMEDUNIT_Impl(context, (NAMEDUNIT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.NONDEPENDENTPDET:
				sequence_NONDEPENDENTPDET(context, (NONDEPENDENTPDET) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.NONINSTANTIABLEFUNCTIONALVIEWCLASS:
				sequence_NONINSTANTIABLEFUNCTIONALVIEWCLASS(context, (NONINSTANTIABLEFUNCTIONALVIEWCLASS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.NONQUANTITATIVECODETYPE:
				sequence_NONQUANTITATIVECODETYPE(context, (NONQUANTITATIVECODETYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.NONQUANTITATIVEINTTYPE:
				sequence_NONQUANTITATIVEINTTYPE(context, (NONQUANTITATIVEINTTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.NONSIUNIT:
				sequence_NONSIUNIT(context, (NONSIUNIT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.NONTRANSLATABLESTRINGTYPE:
				sequence_NONTRANSLATABLESTRINGTYPE(context, (NONTRANSLATABLESTRINGTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.NUMBERTYPE:
				sequence_NUMBERTYPE(context, (NUMBERTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.ORGANIZATION:
				sequence_ORGANIZATION(context, (ORGANIZATION) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PERSON:
				sequence_PERSON(context, (PERSON) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PLACEMENTTYPE:
				sequence_PLACEMENTTYPE(context, (PLACEMENTTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.POSTCONDITION:
				sequence_POSTCONDITION(context, (POSTCONDITION) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PRECONDITION:
				sequence_PRECONDITION(context, (PRECONDITION) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PREFERREDNAME:
				sequence_PREFERREDNAME(context, (PREFERREDNAME) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PREFERREDNAMELABEL:
				sequence_PREFERREDNAMELABEL(context, (PREFERREDNAMELABEL) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PROGRAMREFERENCETYPE:
				sequence_PROGRAMREFERENCETYPE(context, (PROGRAMREFERENCETYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PROPERTIESREFERENCE:
				sequence_PROPERTIESREFERENCE(context, (PROPERTIESREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PROPERTY:
				sequence_PROPERTY_Impl(context, (PROPERTY) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PROPERTYCONSTRAINT:
				sequence_PROPERTYCONSTRAINT_Impl(context, (PROPERTYCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PROPERTYMAPPING:
				sequence_PROPERTYMAPPING(context, (PROPERTYMAPPING) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.PROPERTYREFERENCE:
				sequence_PROPERTYREFERENCE(context, (PROPERTYREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.RANGECONSTRAINT:
				sequence_RANGECONSTRAINT(context, (RANGECONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.RATIONALMEASURETYPE:
				sequence_RATIONALMEASURETYPE(context, (RATIONALMEASURETYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.RATIONALTYPE:
				sequence_RATIONALTYPE(context, (RATIONALTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.REALCURRENCYTYPE:
				sequence_REALCURRENCYTYPE(context, (REALCURRENCYTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.REALMEASURETYPE:
				sequence_REALMEASURETYPE(context, (REALMEASURETYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.REALTYPE:
				sequence_REALTYPE(context, (REALTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.REFERENCEDDOCUMENT:
				sequence_REFERENCEDDOCUMENT(context, (REFERENCEDDOCUMENT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.REFERENCEDGRAPHICS:
				sequence_REFERENCEDGRAPHICS(context, (REFERENCEDGRAPHICS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.REPRESENTATIONPDET:
				sequence_REPRESENTATIONPDET(context, (REPRESENTATIONPDET) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.REPRESENTATIONREFERENCETYPE:
				sequence_REPRESENTATIONREFERENCETYPE(context, (REPRESENTATIONREFERENCETYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SETTYPE:
				sequence_SETTYPE(context, (SETTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SETWITHSUBSETCONSTRAINTTYPE:
				sequence_SETWITHSUBSETCONSTRAINTTYPE(context, (SETWITHSUBSETCONSTRAINTTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SHORTNAME:
				sequence_SHORTNAME(context, (SHORTNAME) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SHORTNAMELABEL:
				sequence_SHORTNAMELABEL(context, (SHORTNAMELABEL) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SIUNIT:
				sequence_SIUNIT(context, (SIUNIT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SOURCEDOCUMENT:
				sequence_SOURCEDOCUMENT_Impl(context, (SOURCEDOCUMENT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.STRINGDICVALUE:
				sequence_STRINGDICVALUE(context, (STRINGDICVALUE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.STRINGPATTERNCONSTRAINT:
				sequence_STRINGPATTERNCONSTRAINT(context, (STRINGPATTERNCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.STRINGS:
				sequence_STRINGS(context, (STRINGS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.STRINGSIZECONSTRAINT:
				sequence_STRINGSIZECONSTRAINT(context, (STRINGSIZECONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.STRINGTYPE:
				sequence_STRINGTYPE(context, (STRINGTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SUBCLASSCONSTRAINT:
				sequence_SUBCLASSCONSTRAINT(context, (SUBCLASSCONSTRAINT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SUBSET:
				sequence_SUBSET(context, (SUBSET) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SUPPLIER:
				sequence_SUPPLIER(context, (SUPPLIER) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SUPPLIERREFERENCE:
				sequence_SUPPLIERREFERENCE(context, (SUPPLIERREFERENCE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SYNONYMOUSNAME:
				sequence_SYNONYMOUSNAME(context, (SYNONYMOUSNAME) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SYNONYMOUSNAMELABEL:
				sequence_SYNONYMOUSNAMELABEL(context, (SYNONYMOUSNAMELABEL) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.SYNONYMOUSSYMBOLS:
				sequence_SYNONYMOUSSYMBOLS(context, (SYNONYMOUSSYMBOLS) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.TEXT:
				sequence_TEXT(context, (TEXT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.TIMEDATATYPE:
				sequence_TIMEDATATYPE(context, (TIMEDATATYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.TRANSLATABLESTRINGTYPE:
				sequence_TRANSLATABLESTRINGTYPE(context, (TRANSLATABLESTRINGTYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.TRANSLATION:
				sequence_TRANSLATION(context, (TRANSLATION) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.TRANSLATIONDATA:
				sequence_TRANSLATIONDATA(context, (TRANSLATIONDATA) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.UNIT:
				sequence_UNIT_Impl(context, (UNIT) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.URITYPE:
				sequence_URITYPE(context, (URITYPE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.VCVRANGE:
				sequence_VCVRANGE(context, (VCVRANGE) semanticObject); 
				return; 
			case Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.VIEWCONTROLVARIABLERANGE:
				sequence_VIEWCONTROLVARIABLERANGE(context, (VIEWCONTROLVARIABLERANGE) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ALTERNATIVEUNITS returns ALTERNATIVEUNITS
	 *
	 * Constraint:
	 *     (dicUnits+=DICUNIT dicUnits+=DICUNIT*)
	 */
	protected void sequence_ALTERNATIVEUNITS(ISerializationContext context, ALTERNATIVEUNITS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns ANYTYPE
	 *     ANYTYPE_Impl returns ANYTYPE
	 *
	 * Constraint:
	 *     constraints=DOMAINCONSTRAINTS?
	 */
	protected void sequence_ANYTYPE_Impl(ISerializationContext context, ANYTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     APOSTERIORISEMANTICRELATIONSHIP returns APOSTERIORICASEOF
	 *     APOSTERIORICASEOF returns APOSTERIORICASEOF
	 *
	 * Constraint:
	 *     (id=EString caseOfSuper=CLASSREFERENCE caseOfSub=CLASSREFERENCE correspondingProperties=CORRESPONDINGPROPERTIES?)
	 */
	protected void sequence_APOSTERIORICASEOF(ISerializationContext context, APOSTERIORICASEOF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     APOSTERIORISEMANTICRELATIONSHIPS returns APOSTERIORISEMANTICRELATIONSHIPS
	 *
	 * Constraint:
	 *     (aPosterioriSemanticRelationships+=APOSTERIORISEMANTICRELATIONSHIP aPosterioriSemanticRelationships+=APOSTERIORISEMANTICRELATIONSHIP*)
	 */
	protected void sequence_APOSTERIORISEMANTICRELATIONSHIPS(ISerializationContext context, APOSTERIORISEMANTICRELATIONSHIPS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     APOSTERIORISEMANTICRELATIONSHIP returns APOSTERIORISEMANTICRELATIONSHIP
	 *     APOSTERIORISEMANTICRELATIONSHIP_Impl returns APOSTERIORISEMANTICRELATIONSHIP
	 *
	 * Constraint:
	 *     id=EString
	 */
	protected void sequence_APOSTERIORISEMANTICRELATIONSHIP_Impl(ISerializationContext context, APOSTERIORISEMANTICRELATIONSHIP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getAPOSTERIORISEMANTICRELATIONSHIP_Id()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getAPOSTERIORISEMANTICRELATIONSHIP_Id()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAPOSTERIORISEMANTICRELATIONSHIP_ImplAccess().getIdEStringParserRuleCall_3_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     APOSTERIORISEMANTICRELATIONSHIP returns APOSTERIORIVIEWOF
	 *     APOSTERIORIVIEWOF returns APOSTERIORIVIEWOF
	 *
	 * Constraint:
	 *     (id=EString item=CLASSREFERENCE model=CLASSREFERENCE correspondingProperties=CORRESPONDINGPROPERTIES?)
	 */
	protected void sequence_APOSTERIORIVIEWOF(ISerializationContext context, APOSTERIORIVIEWOF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns ARRAYTYPE
	 *     ARRAYTYPE returns ARRAYTYPE
	 *
	 * Constraint:
	 *     (uniqueness?='uniqueness' areOptional?='areOptional' constraints=DOMAINCONSTRAINTS? valueType=ANYTYPE)
	 */
	protected void sequence_ARRAYTYPE(ISerializationContext context, ARRAYTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ASSIGNEDVALUE returns ASSIGNEDVALUE
	 *
	 * Constraint:
	 *     {ASSIGNEDVALUE}
	 */
	protected void sequence_ASSIGNEDVALUE(ISerializationContext context, ASSIGNEDVALUE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AUTHORS returns AUTHORS
	 *
	 * Constraint:
	 *     (persons+=PERSON persons+=PERSON*)
	 */
	protected void sequence_AUTHORS(ISerializationContext context, AUTHORS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns AXIS1PLACEMENTTYPE
	 *     AXIS1PLACEMENTTYPE returns AXIS1PLACEMENTTYPE
	 *
	 * Constraint:
	 *     (classRef=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_AXIS1PLACEMENTTYPE(ISerializationContext context, AXIS1PLACEMENTTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns AXIS2PLACEMENT2DTYPE
	 *     AXIS2PLACEMENT2DTYPE returns AXIS2PLACEMENT2DTYPE
	 *
	 * Constraint:
	 *     (classRef=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_AXIS2PLACEMENT2DTYPE(ISerializationContext context, AXIS2PLACEMENT2DTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns AXIS2PLACEMENT3DTYPE
	 *     AXIS2PLACEMENT3DTYPE returns AXIS2PLACEMENT3DTYPE
	 *
	 * Constraint:
	 *     (classRef=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_AXIS2PLACEMENT3DTYPE(ISerializationContext context, AXIS2PLACEMENT3DTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Application returns Application
	 *
	 * Constraint:
	 *     (name=EString (ownedAgents+=Agent ownedAgents+=Agent*)? (ownedPlaces+=Place ownedPlaces+=Place*)?)
	 */
	protected void sequence_Application(ISerializationContext context, Application semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns BAGTYPE
	 *     BAGTYPE returns BAGTYPE
	 *
	 * Constraint:
	 *     (constraints=DOMAINCONSTRAINTS? valueType=ANYTYPE)
	 */
	protected void sequence_BAGTYPE(ISerializationContext context, BAGTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns BOOLEANTYPE
	 *     BOOLEANTYPE returns BOOLEANTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_BOOLEANTYPE(ISerializationContext context, BOOLEANTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOMAINCONSTRAINT returns CARDINALITYCONSTRAINT
	 *     CARDINALITYCONSTRAINT returns CARDINALITYCONSTRAINT
	 *
	 * Constraint:
	 *     {CARDINALITYCONSTRAINT}
	 */
	protected void sequence_CARDINALITYCONSTRAINT(ISerializationContext context, CARDINALITYCONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CLASS returns CATEGORIZATIONCLASS
	 *     CATEGORIZATIONCLASS returns CATEGORIZATIONCLASS
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         categorizationClassSuperclasses=CLASSESREFERENCE?
	 *     )
	 */
	protected void sequence_CATEGORIZATIONCLASS(ISerializationContext context, CATEGORIZATIONCLASS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CLASSCONSTANTVALUES returns CLASSCONSTANTVALUES
	 *
	 * Constraint:
	 *     (classValueAssignments+=CLASSVALUEASSIGNMENT classValueAssignments+=CLASSVALUEASSIGNMENT*)
	 */
	protected void sequence_CLASSCONSTANTVALUES(ISerializationContext context, CLASSCONSTANTVALUES semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONSTRAINT returns CLASSCONSTRAINT
	 *     CLASSCONSTRAINT_Impl returns CLASSCONSTRAINT
	 *
	 * Constraint:
	 *     constraintId=EString?
	 */
	protected void sequence_CLASSCONSTRAINT_Impl(ISerializationContext context, CLASSCONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CLASSESREFERENCE returns CLASSESREFERENCE
	 *
	 * Constraint:
	 *     (class+=CLASSREFERENCE class+=CLASSREFERENCE*)
	 */
	protected void sequence_CLASSESREFERENCE(ISerializationContext context, CLASSESREFERENCE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns CLASSREFERENCETYPE
	 *     CLASSREFERENCETYPE returns CLASSREFERENCETYPE
	 *
	 * Constraint:
	 *     (constraints=DOMAINCONSTRAINTS? domain=CLASSREFERENCE)
	 */
	protected void sequence_CLASSREFERENCETYPE(ISerializationContext context, CLASSREFERENCETYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CLASSREFERENCE returns CLASSREFERENCE
	 *
	 * Constraint:
	 *     classRef=EString
	 */
	protected void sequence_CLASSREFERENCE(ISerializationContext context, CLASSREFERENCE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getCLASSREFERENCE_ClassRef()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getCLASSREFERENCE_ClassRef()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCLASSREFERENCEAccess().getClassRefEStringParserRuleCall_3_0(), semanticObject.getClassRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CLASSVALUEASSIGNMENT returns CLASSVALUEASSIGNMENT
	 *
	 * Constraint:
	 *     (superClassDefinedProperty=PROPERTYREFERENCE assignedValue=ASSIGNEDVALUE)
	 */
	protected void sequence_CLASSVALUEASSIGNMENT(ISerializationContext context, CLASSVALUEASSIGNMENT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getCLASSVALUEASSIGNMENT_SuperClassDefinedProperty()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getCLASSVALUEASSIGNMENT_SuperClassDefinedProperty()));
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getCLASSVALUEASSIGNMENT_AssignedValue()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getCLASSVALUEASSIGNMENT_AssignedValue()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCLASSVALUEASSIGNMENTAccess().getSuperClassDefinedPropertyPROPERTYREFERENCEParserRuleCall_3_0(), semanticObject.getSuperClassDefinedProperty());
		feeder.accept(grammarAccess.getCLASSVALUEASSIGNMENTAccess().getAssignedValueASSIGNEDVALUEParserRuleCall_5_0(), semanticObject.getAssignedValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CLASS returns CLASS
	 *     CLASS_Impl returns CLASS
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT?
	 *     )
	 */
	protected void sequence_CLASS_Impl(ISerializationContext context, CLASS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PROPERTY returns CONDITIONDET
	 *     CONDITIONDET returns CONDITIONDET
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         suggestedValueList?='suggestedValueList'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         detClassification=EString? 
	 *         id=EString 
	 *         nameScope=CLASSREFERENCE 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         preferredSymbol=MATHEMATICALSTRING? 
	 *         synonymousSymbols=SYNONYMOUSSYMBOLS? 
	 *         figure=GRAPHICS? 
	 *         domain=ANYTYPE 
	 *         formula=MATHEMATICALSTRING?
	 *     )
	 */
	protected void sequence_CONDITIONDET(ISerializationContext context, CONDITIONDET semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONSTRAINT returns CONFIGURATIONCONTROLCONSTRAINT
	 *     CONFIGURATIONCONTROLCONSTRAINT returns CONFIGURATIONCONTROLCONSTRAINT
	 *
	 * Constraint:
	 *     (constraintId=EString? precondition=PRECONDITION postcondition=POSTCONDITION)
	 */
	protected void sequence_CONFIGURATIONCONTROLCONSTRAINT(ISerializationContext context, CONFIGURATIONCONTROLCONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONSTRAINTORCONSTRAINTID returns CONSTRAINTORCONSTRAINTID
	 *
	 * Constraint:
	 *     (constraintRef=EString? constraintDefinition=CONSTRAINT?)
	 */
	protected void sequence_CONSTRAINTORCONSTRAINTID(ISerializationContext context, CONSTRAINTORCONSTRAINTID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONSTRAINTS returns CONSTRAINTS
	 *
	 * Constraint:
	 *     (constraints+=CONSTRAINTORCONSTRAINTID constraints+=CONSTRAINTORCONSTRAINTID*)
	 */
	protected void sequence_CONSTRAINTS(ISerializationContext context, CONSTRAINTS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONSTRAINT returns CONSTRAINT
	 *     CONSTRAINT_Impl returns CONSTRAINT
	 *
	 * Constraint:
	 *     constraintId=EString?
	 */
	protected void sequence_CONSTRAINT_Impl(ISerializationContext context, CONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONTAINEDCLASSES returns CONTAINEDCLASSES
	 *
	 * Constraint:
	 *     (class+=CLASS class+=CLASS*)
	 */
	protected void sequence_CONTAINEDCLASSES(ISerializationContext context, CONTAINEDCLASSES semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONTAINEDDATATYPES returns CONTAINEDDATATYPES
	 *
	 * Constraint:
	 *     (datatypes+=DATATYPE datatypes+=DATATYPE*)
	 */
	protected void sequence_CONTAINEDDATATYPES(ISerializationContext context, CONTAINEDDATATYPES semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONTAINEDDOCUMENTS returns CONTAINEDDOCUMENTS
	 *
	 * Constraint:
	 *     (documents+=DOCUMENT documents+=DOCUMENT*)
	 */
	protected void sequence_CONTAINEDDOCUMENTS(ISerializationContext context, CONTAINEDDOCUMENTS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONTAINEDPROPERTIES returns CONTAINEDPROPERTIES
	 *
	 * Constraint:
	 *     (propertys+=PROPERTY propertys+=PROPERTY*)
	 */
	protected void sequence_CONTAINEDPROPERTIES(ISerializationContext context, CONTAINEDPROPERTIES semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONTAINEDSUPPLIERS returns CONTAINEDSUPPLIERS
	 *
	 * Constraint:
	 *     (suppliers+=SUPPLIER suppliers+=SUPPLIER*)
	 */
	protected void sequence_CONTAINEDSUPPLIERS(ISerializationContext context, CONTAINEDSUPPLIERS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UNIT returns CONTEXTDEPENDENTUNIT
	 *     NAMEDUNIT returns CONTEXTDEPENDENTUNIT
	 *     CONTEXTDEPENDENTUNIT returns CONTEXTDEPENDENTUNIT
	 *
	 * Constraint:
	 *     (name=EString dimensions=DIMENSIONALEXPONENTS?)
	 */
	protected void sequence_CONTEXTDEPENDENTUNIT(ISerializationContext context, CONTEXTDEPENDENTUNIT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONTEXTPARAMETERCONSTRAINTS returns CONTEXTPARAMETERCONSTRAINTS
	 *
	 * Constraint:
	 *     (integrityConstraints+=INTEGRITYCONSTRAINT integrityConstraints+=INTEGRITYCONSTRAINT*)
	 */
	protected void sequence_CONTEXTPARAMETERCONSTRAINTS(ISerializationContext context, CONTEXTPARAMETERCONSTRAINTS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONSTRAINT returns CONTEXTRESTRICTIONCONSTRAINT
	 *     CONTEXTRESTRICTIONCONSTRAINT returns CONTEXTRESTRICTIONCONSTRAINT
	 *
	 * Constraint:
	 *     (constraintId=EString? constrainedProperty=PROPERTYREFERENCE contextParameterConstraints=CONTEXTPARAMETERCONSTRAINTS)
	 */
	protected void sequence_CONTEXTRESTRICTIONCONSTRAINT(ISerializationContext context, CONTEXTRESTRICTIONCONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UNIT returns CONVERSIONBASEDUNIT
	 *     NAMEDUNIT returns CONVERSIONBASEDUNIT
	 *     CONVERSIONBASEDUNIT returns CONVERSIONBASEDUNIT
	 *
	 * Constraint:
	 *     (name=EString dimensions=DIMENSIONALEXPONENTS? unitComponent=UNIT)
	 */
	protected void sequence_CONVERSIONBASEDUNIT(ISerializationContext context, CONVERSIONBASEDUNIT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CORRESPONDINGPROPERTIES returns CORRESPONDINGPROPERTIES
	 *
	 * Constraint:
	 *     (mappings+=PROPERTYMAPPING mappings+=PROPERTYMAPPING*)
	 */
	protected void sequence_CORRESPONDINGPROPERTIES(ISerializationContext context, CORRESPONDINGPROPERTIES semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Place returns CommunicationCable
	 *     CommunicationCable returns CommunicationCable
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         name=EString 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         itsOutputPort=[OutputPort|EString] 
	 *         itsInputPort=[InputPort|EString] 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         categorizationClassSuperclasses=CLASSESREFERENCE?
	 *     )
	 */
	protected void sequence_CommunicationCable(ISerializationContext context, CommunicationCable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DATATYPEREFERENCE returns DATATYPEREFERENCE
	 *
	 * Constraint:
	 *     datatypeRef=EString
	 */
	protected void sequence_DATATYPEREFERENCE(ISerializationContext context, DATATYPEREFERENCE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDATATYPEREFERENCE_DatatypeRef()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDATATYPEREFERENCE_DatatypeRef()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDATATYPEREFERENCEAccess().getDatatypeRefEStringParserRuleCall_3_0(), semanticObject.getDatatypeRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DATATYPESREFERENCE returns DATATYPESREFERENCE
	 *
	 * Constraint:
	 *     (datatypes+=DATATYPEREFERENCE datatypes+=DATATYPEREFERENCE*)
	 */
	protected void sequence_DATATYPESREFERENCE(ISerializationContext context, DATATYPESREFERENCE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DATATYPE returns DATATYPE
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         id=EString 
	 *         nameScope=CLASSREFERENCE 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         typeDefinition=ANYTYPE
	 *     )
	 */
	protected void sequence_DATATYPE(ISerializationContext context, DATATYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns DATEDATATYPE
	 *     DATEDATATYPE returns DATEDATATYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_DATEDATATYPE(ISerializationContext context, DATEDATATYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns DATETIMEDATATYPE
	 *     DATETIMEDATATYPE returns DATETIMEDATATYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_DATETIMEDATATYPE(ISerializationContext context, DATETIMEDATATYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Agent returns DCEngine
	 *     DCEngine returns DCEngine
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         categorizationClassSuperclasses=CLASSESREFERENCE? 
	 *         (ownedPorts+=Port ownedPorts+=Port*)?
	 *     )
	 */
	protected void sequence_DCEngine(ISerializationContext context, DCEngine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PROPERTY returns DEPENDENTPDET
	 *     DEPENDENTPDET returns DEPENDENTPDET
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         suggestedValueList?='suggestedValueList'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         detClassification=EString? 
	 *         id=EString 
	 *         nameScope=CLASSREFERENCE 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         preferredSymbol=MATHEMATICALSTRING? 
	 *         synonymousSymbols=SYNONYMOUSSYMBOLS? 
	 *         figure=GRAPHICS? 
	 *         domain=ANYTYPE 
	 *         formula=MATHEMATICALSTRING? 
	 *         dependsOn=PROPERTIESREFERENCE?
	 *     )
	 */
	protected void sequence_DEPENDENTPDET(ISerializationContext context, DEPENDENTPDET semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DERIVEDUNITELEMENT returns DERIVEDUNITELEMENT
	 *
	 * Constraint:
	 *     unit=NAMEDUNIT
	 */
	protected void sequence_DERIVEDUNITELEMENT(ISerializationContext context, DERIVEDUNITELEMENT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDERIVEDUNITELEMENT_Unit()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDERIVEDUNITELEMENT_Unit()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDERIVEDUNITELEMENTAccess().getUnitNAMEDUNITParserRuleCall_3_0(), semanticObject.getUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UNIT returns DERIVEDUNIT
	 *     DERIVEDUNIT returns DERIVEDUNIT
	 *
	 * Constraint:
	 *     (derivedUnitElements+=DERIVEDUNITELEMENT derivedUnitElements+=DERIVEDUNITELEMENT*)
	 */
	protected void sequence_DERIVEDUNIT(ISerializationContext context, DERIVEDUNIT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DICTIONARIESREFERENCE returns DICTIONARIESREFERENCE
	 *
	 * Constraint:
	 *     (dictionarys+=DICTIONARYREFERENCE dictionarys+=DICTIONARYREFERENCE*)
	 */
	protected void sequence_DICTIONARIESREFERENCE(ISerializationContext context, DICTIONARIESREFERENCE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DICTIONARYREFERENCE returns DICTIONARYREFERENCE
	 *
	 * Constraint:
	 *     dictionaryRef=EString
	 */
	protected void sequence_DICTIONARYREFERENCE(ISerializationContext context, DICTIONARYREFERENCE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDICTIONARYREFERENCE_DictionaryRef()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDICTIONARYREFERENCE_DictionaryRef()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDICTIONARYREFERENCEAccess().getDictionaryRefEStringParserRuleCall_3_0(), semanticObject.getDictionaryRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DICUNITREFERENCE returns DICUNITREFERENCE
	 *
	 * Constraint:
	 *     dicUnitRef=EString
	 */
	protected void sequence_DICUNITREFERENCE(ISerializationContext context, DICUNITREFERENCE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDICUNITREFERENCE_DicUnitRef()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDICUNITREFERENCE_DicUnitRef()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDICUNITREFERENCEAccess().getDicUnitRefEStringParserRuleCall_3_0(), semanticObject.getDicUnitRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DICUNITSREFERENCE returns DICUNITSREFERENCE
	 *
	 * Constraint:
	 *     (dicUnits+=DICUNITREFERENCE dicUnits+=DICUNITREFERENCE*)
	 */
	protected void sequence_DICUNITSREFERENCE(ISerializationContext context, DICUNITSREFERENCE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DICUNIT returns DICUNIT
	 *
	 * Constraint:
	 *     (unitRef=EString? structuredRepresentation=UNIT? stringRepresentation=MATHEMATICALSTRING?)
	 */
	protected void sequence_DICUNIT(ISerializationContext context, DICUNIT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DICVALUE returns DICVALUE
	 *     DICVALUE_Impl returns DICVALUE
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         status=EString? 
	 *         valueMeaningId=EString? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         definition=TEXT? 
	 *         isDeprecatedInterpretation=TEXT?
	 *     )
	 */
	protected void sequence_DICVALUE_Impl(ISerializationContext context, DICVALUE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DIMENSIONALEXPONENTS returns DIMENSIONALEXPONENTS
	 *
	 * Constraint:
	 *     {DIMENSIONALEXPONENTS}
	 */
	protected void sequence_DIMENSIONALEXPONENTS(ISerializationContext context, DIMENSIONALEXPONENTS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOCUMENTCONTENT returns DOCUMENTCONTENT
	 *
	 * Constraint:
	 *     (revision=EString (files+=HTTPFILE files+=HTTPFILE*)?)
	 */
	protected void sequence_DOCUMENTCONTENT(ISerializationContext context, DOCUMENTCONTENT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOCUMENTIDENTIFIERNAMELABEL returns DOCUMENTIDENTIFIERNAMELABEL
	 *
	 * Constraint:
	 *     (value=EString? countryCode=EString? languageCode=EString?)
	 */
	protected void sequence_DOCUMENTIDENTIFIERNAMELABEL(ISerializationContext context, DOCUMENTIDENTIFIERNAMELABEL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOCUMENTIDENTIFIER returns DOCUMENTIDENTIFIER
	 *
	 * Constraint:
	 *     (labels+=DOCUMENTIDENTIFIERNAMELABEL labels+=DOCUMENTIDENTIFIERNAMELABEL*)
	 */
	protected void sequence_DOCUMENTIDENTIFIER(ISerializationContext context, DOCUMENTIDENTIFIER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOCUMENTREFERENCE returns DOCUMENTREFERENCE
	 *
	 * Constraint:
	 *     documentRef=EString
	 */
	protected void sequence_DOCUMENTREFERENCE(ISerializationContext context, DOCUMENTREFERENCE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDOCUMENTREFERENCE_DocumentRef()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getDOCUMENTREFERENCE_DocumentRef()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDOCUMENTREFERENCEAccess().getDocumentRefEStringParserRuleCall_3_0(), semanticObject.getDocumentRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DOCUMENTSREFERENCE returns DOCUMENTSREFERENCE
	 *
	 * Constraint:
	 *     (documents+=DOCUMENTREFERENCE documents+=DOCUMENTREFERENCE*)
	 */
	protected void sequence_DOCUMENTSREFERENCE(ISerializationContext context, DOCUMENTSREFERENCE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOCUMENT returns DOCUMENT
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         id=EString 
	 *         nameScope=CLASSREFERENCE 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         authors=AUTHORS? 
	 *         publishingOrganisation=ORGANIZATION 
	 *         content=DOCUMENTCONTENT?
	 *     )
	 */
	protected void sequence_DOCUMENT(ISerializationContext context, DOCUMENT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOMAINCONSTRAINTS returns DOMAINCONSTRAINTS
	 *
	 * Constraint:
	 *     (constraints+=DOMAINCONSTRAINT constraints+=DOMAINCONSTRAINT*)
	 */
	protected void sequence_DOMAINCONSTRAINTS(ISerializationContext context, DOMAINCONSTRAINTS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOMAINCONSTRAINT returns DOMAINCONSTRAINT
	 *     DOMAINCONSTRAINT_Impl returns DOMAINCONSTRAINT
	 *
	 * Constraint:
	 *     {DOMAINCONSTRAINT}
	 */
	protected void sequence_DOMAINCONSTRAINT_Impl(ISerializationContext context, DOMAINCONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOMAINCONSTRAINT returns ENUMERATIONCONSTRAINT
	 *     ENUMERATIONCONSTRAINT returns ENUMERATIONCONSTRAINT
	 *
	 * Constraint:
	 *     (subset=SUBSET? valueMeaning=NONQUANTITATIVEINTTYPE?)
	 */
	protected void sequence_ENUMERATIONCONSTRAINT(ISerializationContext context, ENUMERATIONCONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EXTERNALFILES returns EXTERNALFILES
	 *
	 * Constraint:
	 *     (files+=HTTPFILE files+=HTTPFILE*)?
	 */
	protected void sequence_EXTERNALFILES(ISerializationContext context, EXTERNALFILES semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GRAPHICS returns EXTERNALGRAPHICS
	 *     EXTERNALGRAPHICS returns EXTERNALGRAPHICS
	 *
	 * Constraint:
	 *     representation=EXTERNALFILES
	 */
	protected void sequence_EXTERNALGRAPHICS(ISerializationContext context, EXTERNALGRAPHICS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getEXTERNALGRAPHICS_Representation()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getEXTERNALGRAPHICS_Representation()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEXTERNALGRAPHICSAccess().getRepresentationEXTERNALFILESParserRuleCall_3_0(), semanticObject.getRepresentation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FILTER returns FILTER
	 *
	 * Constraint:
	 *     (referencedProperty=PROPERTYREFERENCE domain=ENUMERATIONCONSTRAINT)
	 */
	protected void sequence_FILTER(ISerializationContext context, FILTER semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getFILTER_ReferencedProperty()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getFILTER_ReferencedProperty()));
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getFILTER_Domain()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getFILTER_Domain()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFILTERAccess().getReferencedPropertyPROPERTYREFERENCEParserRuleCall_3_0(), semanticObject.getReferencedProperty());
		feeder.accept(grammarAccess.getFILTERAccess().getDomainENUMERATIONCONSTRAINTParserRuleCall_5_0(), semanticObject.getDomain());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CLASS returns FMCLASSVIEWOF
	 *     FMCLASSVIEWOF returns FMCLASSVIEWOF
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         createdView=CLASSREFERENCE 
	 *         vCVRange=VCVRANGE? 
	 *         importedPropertiesFromView=PROPERTIESREFERENCE? 
	 *         importedTypesFromView=DATATYPESREFERENCE? 
	 *         importedDocumentsFromView=DOCUMENTSREFERENCE? 
	 *         importedConstraintsFromView=CONSTRAINTS? 
	 *         caseOf=CLASSESREFERENCE? 
	 *         importedPropertiesFromModels=PROPERTIESREFERENCE? 
	 *         importedTypesFromModels=DATATYPESREFERENCE? 
	 *         importedDocumentsFromModels=DOCUMENTSREFERENCE? 
	 *         importedConstraintsFromModels=CONSTRAINTS? 
	 *         viewOf=CLASSREFERENCE 
	 *         importedPropertiesFromItem=PROPERTIESREFERENCE? 
	 *         importedTypesFromItem=DATATYPESREFERENCE? 
	 *         importedDocumentsFromItem=DOCUMENTSREFERENCE? 
	 *         importedConstraintsFromItem=CONSTRAINTS?
	 *     )
	 */
	protected void sequence_FMCLASSVIEWOF(ISerializationContext context, FMCLASSVIEWOF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CLASS returns FUNCTIONALMODELCLASS
	 *     FUNCTIONALMODELCLASS returns FUNCTIONALMODELCLASS
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         createdView=CLASSREFERENCE 
	 *         vCVRange=VCVRANGE? 
	 *         importedPropertiesFromView=PROPERTIESREFERENCE? 
	 *         importedTypesFromView=DATATYPESREFERENCE? 
	 *         importedDocumentsFromView=DOCUMENTSREFERENCE? 
	 *         importedCosntraintsFromView=CONSTRAINTS? 
	 *         caseOf=CLASSESREFERENCE? 
	 *         importedPropertiesFromModels=PROPERTIESREFERENCE? 
	 *         importedTypesFromModels=DATATYPESREFERENCE? 
	 *         importedDocumentsFromModels=DOCUMENTSREFERENCE? 
	 *         importedConstraintsFromModels=CONSTRAINTS?
	 *     )
	 */
	protected void sequence_FUNCTIONALMODELCLASS(ISerializationContext context, FUNCTIONALMODELCLASS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Agent returns Fieldbus
	 *     Fieldbus returns Fieldbus
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         categorizationClassSuperclasses=CLASSESREFERENCE? 
	 *         (ownedPorts+=Port ownedPorts+=Port*)?
	 *     )
	 */
	protected void sequence_Fieldbus(ISerializationContext context, Fieldbus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GENERALTEXT returns GENERALTEXT
	 *
	 * Constraint:
	 *     (value=EString? countryCode=EString? languageCode=EString?)
	 */
	protected void sequence_GENERALTEXT(ISerializationContext context, GENERALTEXT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GEOMETRICCONTEXT returns GEOMETRICCONTEXT
	 *
	 * Constraint:
	 *     description=TEXT
	 */
	protected void sequence_GEOMETRICCONTEXT(ISerializationContext context, GEOMETRICCONTEXT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getGEOMETRICCONTEXT_Description()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getGEOMETRICCONTEXT_Description()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGEOMETRICCONTEXTAccess().getDescriptionTEXTParserRuleCall_3_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GEOMETRICUNITCONTEXT returns GEOMETRICUNITCONTEXT
	 *
	 * Constraint:
	 *     (lengthUnit=DICUNIT? lengthUnitId=DICUNITREFERENCE? langleUnit=DICUNIT? angleUnitId=DICUNITREFERENCE?)
	 */
	protected void sequence_GEOMETRICUNITCONTEXT(ISerializationContext context, GEOMETRICUNITCONTEXT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GRAPHICS returns GRAPHICS
	 *     GRAPHICS_Impl returns GRAPHICS
	 *
	 * Constraint:
	 *     {GRAPHICS}
	 */
	protected void sequence_GRAPHICS_Impl(ISerializationContext context, GRAPHICS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HTTPFILE returns HTTPFILE
	 *
	 * Constraint:
	 *     (httpFile=EString fileName=EString? dirName=EString? countryCode=EString? languageCode=EString?)
	 */
	protected void sequence_HTTPFILE(ISerializationContext context, HTTPFILE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SOURCEDOCUMENT returns IDENTIFIEDDOCUMENT
	 *     IDENTIFIEDDOCUMENT returns IDENTIFIEDDOCUMENT
	 *
	 * Constraint:
	 *     documentIdentifier=DOCUMENTIDENTIFIER
	 */
	protected void sequence_IDENTIFIEDDOCUMENT(ISerializationContext context, IDENTIFIEDDOCUMENT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getIDENTIFIEDDOCUMENT_DocumentIdentifier()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getIDENTIFIEDDOCUMENT_DocumentIdentifier()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIDENTIFIEDDOCUMENTAccess().getDocumentIdentifierDOCUMENTIDENTIFIERParserRuleCall_3_0(), semanticObject.getDocumentIdentifier());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns INTCURRENCYTYPE
	 *     INTCURRENCYTYPE returns INTCURRENCYTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? currency=EString? currencyId=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_INTCURRENCYTYPE(ISerializationContext context, INTCURRENCYTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DICVALUE returns INTDICVALUE
	 *     INTDICVALUE returns INTDICVALUE
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         status=EString? 
	 *         valueMeaningId=EString? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         definition=TEXT? 
	 *         isDeprecatedInterpretation=TEXT?
	 *     )
	 */
	protected void sequence_INTDICVALUE(ISerializationContext context, INTDICVALUE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONSTRAINT returns INTEGRITYCONSTRAINT
	 *     INTEGRITYCONSTRAINT returns INTEGRITYCONSTRAINT
	 *
	 * Constraint:
	 *     (constraintId=EString? constrainedProperty=PROPERTYREFERENCE redefinedDomain=DOMAINCONSTRAINT)
	 */
	protected void sequence_INTEGRITYCONSTRAINT(ISerializationContext context, INTEGRITYCONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns INTMEASURETYPE
	 *     INTMEASURETYPE returns INTMEASURETYPE
	 *
	 * Constraint:
	 *     (
	 *         valueFormat=EString? 
	 *         constraints=DOMAINCONSTRAINTS? 
	 *         unit=DICUNIT? 
	 *         alternativeUnits=ALTERNATIVEUNITS? 
	 *         unitId=DICUNITREFERENCE? 
	 *         alternativeUnitIds=DICUNITSREFERENCE?
	 *     )
	 */
	protected void sequence_INTMEASURETYPE(ISerializationContext context, INTMEASURETYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns INTTYPE
	 *     INTTYPE returns INTTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_INTTYPE(ISerializationContext context, INTTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CLASS returns ITEMCLASSCASEOF
	 *     ITEMCLASSCASEOF returns ITEMCLASSCASEOF
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         instanceSharable?='instanceSharable'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         codedName=EString? 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         simplifiedDrawing=GRAPHICS? 
	 *         isCaseOf=CLASSESREFERENCE 
	 *         importedProperties=PROPERTIESREFERENCE? 
	 *         importedTypes=DATATYPESREFERENCE? 
	 *         importedDocuments=DOCUMENTSREFERENCE? 
	 *         importedConstraints=CONSTRAINTS?
	 *     )
	 */
	protected void sequence_ITEMCLASSCASEOF(ISerializationContext context, ITEMCLASSCASEOF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CLASS returns ITEMCLASS
	 *     ITEMCLASS returns ITEMCLASS
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         instanceSharable?='instanceSharable'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         codedName=EString? 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         simplifiedDrawing=GRAPHICS?
	 *     )
	 */
	protected void sequence_ITEMCLASS(ISerializationContext context, ITEMCLASS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ITSVALUES returns ITSVALUES
	 *
	 * Constraint:
	 *     (dicValues+=DICVALUE dicValues+=DICVALUE*)
	 */
	protected void sequence_ITSVALUES(ISerializationContext context, ITSVALUES semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Agent returns InductiveProximitySwitch
	 *     InductiveProximitySwitch returns InductiveProximitySwitch
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         categorizationClassSuperclasses=CLASSESREFERENCE? 
	 *         (ownedPorts+=Port ownedPorts+=Port*)?
	 *     )
	 */
	protected void sequence_InductiveProximitySwitch(ISerializationContext context, InductiveProximitySwitch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Port returns InputPort
	 *     InputPort returns InputPort
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_InputPort(ISerializationContext context, InputPort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EpmlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EpmlPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputPortAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KEYWORDLABEL returns KEYWORDLABEL
	 *
	 * Constraint:
	 *     (value=EString? countryCode=EString? languageCode=EString?)
	 */
	protected void sequence_KEYWORDLABEL(ISerializationContext context, KEYWORDLABEL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KEYWORD returns KEYWORD
	 *
	 * Constraint:
	 *     (labels+=KEYWORDLABEL labels+=KEYWORDLABEL*)?
	 */
	protected void sequence_KEYWORD(ISerializationContext context, KEYWORD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LANGUAGE returns LANGUAGE
	 *
	 * Constraint:
	 *     (countryCode=EString? languageCode=EString?)
	 */
	protected void sequence_LANGUAGE(ISerializationContext context, LANGUAGE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns LEVELTYPE
	 *     LEVELTYPE returns LEVELTYPE
	 *
	 * Constraint:
	 *     (constraints=DOMAINCONSTRAINTS? levels=LEVEL valueType=ANYTYPE)
	 */
	protected void sequence_LEVELTYPE(ISerializationContext context, LEVELTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LEVEL returns LEVEL
	 *
	 * Constraint:
	 *     {LEVEL}
	 */
	protected void sequence_LEVEL(ISerializationContext context, LEVEL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns LISTTYPE
	 *     LISTTYPE returns LISTTYPE
	 *
	 * Constraint:
	 *     (uniqueness?='uniqueness' constraints=DOMAINCONSTRAINTS? valueType=ANYTYPE)
	 */
	protected void sequence_LISTTYPE(ISerializationContext context, LISTTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MAPPINGFUNCTION returns MAPPINGFUNCTION
	 *
	 * Constraint:
	 *     {MAPPINGFUNCTION}
	 */
	protected void sequence_MAPPINGFUNCTION(ISerializationContext context, MAPPINGFUNCTION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MATHEMATICALSTRING returns MATHEMATICALSTRING
	 *
	 * Constraint:
	 *     textRepresentation=EString
	 */
	protected void sequence_MATHEMATICALSTRING(ISerializationContext context, MATHEMATICALSTRING semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getMATHEMATICALSTRING_TextRepresentation()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getMATHEMATICALSTRING_TextRepresentation()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMATHEMATICALSTRINGAccess().getTextRepresentationEStringParserRuleCall_3_0(), semanticObject.getTextRepresentation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns NAMEDTYPE
	 *     NAMEDTYPE returns NAMEDTYPE
	 *
	 * Constraint:
	 *     (constraints=DOMAINCONSTRAINTS? referredType=DATATYPEREFERENCE)
	 */
	protected void sequence_NAMEDTYPE(ISerializationContext context, NAMEDTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UNIT returns NAMEDUNIT
	 *     NAMEDUNIT returns NAMEDUNIT
	 *     NAMEDUNIT_Impl returns NAMEDUNIT
	 *
	 * Constraint:
	 *     dimensions=DIMENSIONALEXPONENTS?
	 */
	protected void sequence_NAMEDUNIT_Impl(ISerializationContext context, NAMEDUNIT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PROPERTY returns NONDEPENDENTPDET
	 *     NONDEPENDENTPDET returns NONDEPENDENTPDET
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         suggestedValueList?='suggestedValueList'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         detClassification=EString? 
	 *         id=EString 
	 *         nameScope=CLASSREFERENCE 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         preferredSymbol=MATHEMATICALSTRING? 
	 *         synonymousSymbols=SYNONYMOUSSYMBOLS? 
	 *         figure=GRAPHICS? 
	 *         domain=ANYTYPE 
	 *         formula=MATHEMATICALSTRING?
	 *     )
	 */
	protected void sequence_NONDEPENDENTPDET(ISerializationContext context, NONDEPENDENTPDET semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CLASS returns NONINSTANTIABLEFUNCTIONALVIEWCLASS
	 *     NONINSTANTIABLEFUNCTIONALVIEWCLASS returns NONINSTANTIABLEFUNCTIONALVIEWCLASS
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         viewControlVariables=PROPERTIESREFERENCE?
	 *     )
	 */
	protected void sequence_NONINSTANTIABLEFUNCTIONALVIEWCLASS(ISerializationContext context, NONINSTANTIABLEFUNCTIONALVIEWCLASS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns NONQUANTITATIVECODETYPE
	 *     NONQUANTITATIVECODETYPE returns NONQUANTITATIVECODETYPE
	 *
	 * Constraint:
	 *     (
	 *         valueFormat=EString? 
	 *         constraints=DOMAINCONSTRAINTS? 
	 *         itsValues=ITSVALUES 
	 *         sourceDocOfValueDomain=SOURCEDOCUMENT? 
	 *         definition=TEXT? 
	 *         icon=GRAPHICS?
	 *     )
	 */
	protected void sequence_NONQUANTITATIVECODETYPE(ISerializationContext context, NONQUANTITATIVECODETYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns NONQUANTITATIVEINTTYPE
	 *     NONQUANTITATIVEINTTYPE returns NONQUANTITATIVEINTTYPE
	 *
	 * Constraint:
	 *     (
	 *         valueFormat=EString? 
	 *         constraints=DOMAINCONSTRAINTS? 
	 *         itsValues=ITSVALUES 
	 *         sourceDocOfValueDomain=SOURCEDOCUMENT? 
	 *         definition=TEXT? 
	 *         icon=GRAPHICS?
	 *     )
	 */
	protected void sequence_NONQUANTITATIVEINTTYPE(ISerializationContext context, NONQUANTITATIVEINTTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UNIT returns NONSIUNIT
	 *     NAMEDUNIT returns NONSIUNIT
	 *     NONSIUNIT returns NONSIUNIT
	 *
	 * Constraint:
	 *     (name=EString dimensions=DIMENSIONALEXPONENTS?)
	 */
	protected void sequence_NONSIUNIT(ISerializationContext context, NONSIUNIT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns NONTRANSLATABLESTRINGTYPE
	 *     NONTRANSLATABLESTRINGTYPE returns NONTRANSLATABLESTRINGTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_NONTRANSLATABLESTRINGTYPE(ISerializationContext context, NONTRANSLATABLESTRINGTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns NUMBERTYPE
	 *     NUMBERTYPE returns NUMBERTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_NUMBERTYPE(ISerializationContext context, NUMBERTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ORGANIZATION returns ORGANIZATION
	 *
	 * Constraint:
	 *     (name=EString id=EString? description=EString?)
	 */
	protected void sequence_ORGANIZATION(ISerializationContext context, ORGANIZATION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Port returns OutputPort
	 *     OutputPort returns OutputPort
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_OutputPort(ISerializationContext context, OutputPort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EpmlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EpmlPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutputPortAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Agent returns PCBasedControls
	 *     PCBasedControls returns PCBasedControls
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         categorizationClassSuperclasses=CLASSESREFERENCE? 
	 *         (ownedPorts+=Port ownedPorts+=Port*)?
	 *     )
	 */
	protected void sequence_PCBasedControls(ISerializationContext context, PCBasedControls semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PERSON returns PERSON
	 *
	 * Constraint:
	 *     (
	 *         id=EString 
	 *         lastName=EString? 
	 *         firstName=EString? 
	 *         middleNames=STRINGS? 
	 *         prefixTitles=STRINGS? 
	 *         suffixTitles=STRINGS?
	 *     )
	 */
	protected void sequence_PERSON(ISerializationContext context, PERSON semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns PLACEMENTTYPE
	 *     PLACEMENTTYPE returns PLACEMENTTYPE
	 *
	 * Constraint:
	 *     (classRef=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_PLACEMENTTYPE(ISerializationContext context, PLACEMENTTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     POSTCONDITION returns POSTCONDITION
	 *
	 * Constraint:
	 *     (filters+=FILTER filters+=FILTER*)
	 */
	protected void sequence_POSTCONDITION(ISerializationContext context, POSTCONDITION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PRECONDITION returns PRECONDITION
	 *
	 * Constraint:
	 *     (filters+=FILTER filters+=FILTER*)?
	 */
	protected void sequence_PRECONDITION(ISerializationContext context, PRECONDITION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PREFERREDNAMELABEL returns PREFERREDNAMELABEL
	 *
	 * Constraint:
	 *     (value=EString? countryCode=EString? languageCode=EString?)
	 */
	protected void sequence_PREFERREDNAMELABEL(ISerializationContext context, PREFERREDNAMELABEL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PREFERREDNAME returns PREFERREDNAME
	 *
	 * Constraint:
	 *     (labels+=PREFERREDNAMELABEL labels+=PREFERREDNAMELABEL*)
	 */
	protected void sequence_PREFERREDNAME(ISerializationContext context, PREFERREDNAME semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns PROGRAMREFERENCETYPE
	 *     PROGRAMREFERENCETYPE returns PROGRAMREFERENCETYPE
	 *
	 * Constraint:
	 *     (
	 *         classRef=EString? 
	 *         constraints=DOMAINCONSTRAINTS? 
	 *         inParameters=PROPERTIESREFERENCE? 
	 *         outParameters=PROPERTIESREFERENCE? 
	 *         inoutParameters=PROPERTIESREFERENCE?
	 *     )
	 */
	protected void sequence_PROGRAMREFERENCETYPE(ISerializationContext context, PROGRAMREFERENCETYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PROPERTIESREFERENCE returns PROPERTIESREFERENCE
	 *
	 * Constraint:
	 *     (propertys+=PROPERTYREFERENCE propertys+=PROPERTYREFERENCE*)
	 */
	protected void sequence_PROPERTIESREFERENCE(ISerializationContext context, PROPERTIESREFERENCE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CONSTRAINT returns PROPERTYCONSTRAINT
	 *     PROPERTYCONSTRAINT_Impl returns PROPERTYCONSTRAINT
	 *
	 * Constraint:
	 *     (constraintId=EString? constrainedProperty=PROPERTYREFERENCE)
	 */
	protected void sequence_PROPERTYCONSTRAINT_Impl(ISerializationContext context, PROPERTYCONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PROPERTYMAPPING returns PROPERTYMAPPING
	 *
	 * Constraint:
	 *     (domains+=PROPERTIESREFERENCE domains+=PROPERTIESREFERENCE* range=PROPERTYREFERENCE function=MAPPINGFUNCTION?)
	 */
	protected void sequence_PROPERTYMAPPING(ISerializationContext context, PROPERTYMAPPING semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PROPERTYREFERENCE returns PROPERTYREFERENCE
	 *
	 * Constraint:
	 *     propertyRef=EString
	 */
	protected void sequence_PROPERTYREFERENCE(ISerializationContext context, PROPERTYREFERENCE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getPROPERTYREFERENCE_PropertyRef()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getPROPERTYREFERENCE_PropertyRef()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPROPERTYREFERENCEAccess().getPropertyRefEStringParserRuleCall_3_0(), semanticObject.getPropertyRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PROPERTY returns PROPERTY
	 *     PROPERTY_Impl returns PROPERTY
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         suggestedValueList?='suggestedValueList'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         detClassification=EString? 
	 *         id=EString 
	 *         nameScope=CLASSREFERENCE 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         preferredSymbol=MATHEMATICALSTRING? 
	 *         synonymousSymbols=SYNONYMOUSSYMBOLS? 
	 *         figure=GRAPHICS? 
	 *         domain=ANYTYPE 
	 *         formula=MATHEMATICALSTRING?
	 *     )
	 */
	protected void sequence_PROPERTY_Impl(ISerializationContext context, PROPERTY semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOMAINCONSTRAINT returns RANGECONSTRAINT
	 *     RANGECONSTRAINT returns RANGECONSTRAINT
	 *
	 * Constraint:
	 *     {RANGECONSTRAINT}
	 */
	protected void sequence_RANGECONSTRAINT(ISerializationContext context, RANGECONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns RATIONALMEASURETYPE
	 *     RATIONALMEASURETYPE returns RATIONALMEASURETYPE
	 *
	 * Constraint:
	 *     (
	 *         valueFormat=EString? 
	 *         constraints=DOMAINCONSTRAINTS? 
	 *         unit=DICUNIT? 
	 *         alternativeUnits=ALTERNATIVEUNITS? 
	 *         unitId=DICUNITREFERENCE? 
	 *         alternativeUnitIds=DICUNITSREFERENCE?
	 *     )
	 */
	protected void sequence_RATIONALMEASURETYPE(ISerializationContext context, RATIONALMEASURETYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns RATIONALTYPE
	 *     RATIONALTYPE returns RATIONALTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_RATIONALTYPE(ISerializationContext context, RATIONALTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns REALCURRENCYTYPE
	 *     REALCURRENCYTYPE returns REALCURRENCYTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? currency=EString? currencyId=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_REALCURRENCYTYPE(ISerializationContext context, REALCURRENCYTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns REALMEASURETYPE
	 *     REALMEASURETYPE returns REALMEASURETYPE
	 *
	 * Constraint:
	 *     (
	 *         valueFormat=EString? 
	 *         constraints=DOMAINCONSTRAINTS? 
	 *         unit=DICUNIT? 
	 *         alternativeUnits=ALTERNATIVEUNITS? 
	 *         unitId=DICUNITREFERENCE? 
	 *         alternativeUnitIds=DICUNITSREFERENCE?
	 *     )
	 */
	protected void sequence_REALMEASURETYPE(ISerializationContext context, REALMEASURETYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns REALTYPE
	 *     REALTYPE returns REALTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_REALTYPE(ISerializationContext context, REALTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SOURCEDOCUMENT returns REFERENCEDDOCUMENT
	 *     REFERENCEDDOCUMENT returns REFERENCEDDOCUMENT
	 *
	 * Constraint:
	 *     documentReference=DOCUMENTREFERENCE
	 */
	protected void sequence_REFERENCEDDOCUMENT(ISerializationContext context, REFERENCEDDOCUMENT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getREFERENCEDDOCUMENT_DocumentReference()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getREFERENCEDDOCUMENT_DocumentReference()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getREFERENCEDDOCUMENTAccess().getDocumentReferenceDOCUMENTREFERENCEParserRuleCall_3_0(), semanticObject.getDocumentReference());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GRAPHICS returns REFERENCEDGRAPHICS
	 *     REFERENCEDGRAPHICS returns REFERENCEDGRAPHICS
	 *
	 * Constraint:
	 *     graphicsReference=DOCUMENTREFERENCE
	 */
	protected void sequence_REFERENCEDGRAPHICS(ISerializationContext context, REFERENCEDGRAPHICS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getREFERENCEDGRAPHICS_GraphicsReference()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getREFERENCEDGRAPHICS_GraphicsReference()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getREFERENCEDGRAPHICSAccess().getGraphicsReferenceDOCUMENTREFERENCEParserRuleCall_3_0(), semanticObject.getGraphicsReference());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PROPERTY returns REPRESENTATIONPDET
	 *     REPRESENTATIONPDET returns REPRESENTATIONPDET
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         suggestedValueList?='suggestedValueList'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         detClassification=EString? 
	 *         id=EString 
	 *         nameScope=CLASSREFERENCE 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         preferredSymbol=MATHEMATICALSTRING? 
	 *         synonymousSymbols=SYNONYMOUSSYMBOLS? 
	 *         figure=GRAPHICS? 
	 *         domain=ANYTYPE 
	 *         formula=MATHEMATICALSTRING?
	 *     )
	 */
	protected void sequence_REPRESENTATIONPDET(ISerializationContext context, REPRESENTATIONPDET semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns REPRESENTATIONREFERENCETYPE
	 *     REPRESENTATIONREFERENCETYPE returns REPRESENTATIONREFERENCETYPE
	 *
	 * Constraint:
	 *     (classRef=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_REPRESENTATIONREFERENCETYPE(ISerializationContext context, REPRESENTATIONREFERENCETYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Place returns ReadyMadeDataCable
	 *     ReadyMadeDataCable returns ReadyMadeDataCable
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         name=EString 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         itsOutputPort=[OutputPort|EString] 
	 *         itsInputPort=[InputPort|EString] 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         categorizationClassSuperclasses=CLASSESREFERENCE?
	 *     )
	 */
	protected void sequence_ReadyMadeDataCable(ISerializationContext context, ReadyMadeDataCable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Agent returns RectangularConnectorSet
	 *     RectangularConnectorSet returns RectangularConnectorSet
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         hierarchicalPosition=EString? 
	 *         id=EString 
	 *         translation=TRANSLATION? 
	 *         sourceLanguage=LANGUAGE? 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         definition=TEXT 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         note=TEXT? 
	 *         remark=TEXT? 
	 *         itsSuperclass=CLASSREFERENCE? 
	 *         describedBy=PROPERTIESREFERENCE? 
	 *         definedTypes=DATATYPESREFERENCE? 
	 *         definedDocuments=DOCUMENTSREFERENCE? 
	 *         constraints=CONSTRAINTS? 
	 *         keywords=KEYWORD? 
	 *         subClassProperties=PROPERTIESREFERENCE? 
	 *         classConstantValues=CLASSCONSTANTVALUES? 
	 *         geometricRepresentationContext=GEOMETRICCONTEXT? 
	 *         globalUnitContext=GEOMETRICUNITCONTEXT? 
	 *         categorizationClassSuperclasses=CLASSESREFERENCE? 
	 *         (ownedPorts+=Port ownedPorts+=Port*)?
	 *     )
	 */
	protected void sequence_RectangularConnectorSet(ISerializationContext context, RectangularConnectorSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns SETTYPE
	 *     SETTYPE returns SETTYPE
	 *
	 * Constraint:
	 *     (constraints=DOMAINCONSTRAINTS? valueType=ANYTYPE)
	 */
	protected void sequence_SETTYPE(ISerializationContext context, SETTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns SETWITHSUBSETCONSTRAINTTYPE
	 *     SETWITHSUBSETCONSTRAINTTYPE returns SETWITHSUBSETCONSTRAINTTYPE
	 *
	 * Constraint:
	 *     (constraints=DOMAINCONSTRAINTS? valueType=ANYTYPE)
	 */
	protected void sequence_SETWITHSUBSETCONSTRAINTTYPE(ISerializationContext context, SETWITHSUBSETCONSTRAINTTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SHORTNAMELABEL returns SHORTNAMELABEL
	 *
	 * Constraint:
	 *     (value=EString? countryCode=EString? languageCode=EString?)
	 */
	protected void sequence_SHORTNAMELABEL(ISerializationContext context, SHORTNAMELABEL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SHORTNAME returns SHORTNAME
	 *
	 * Constraint:
	 *     (labels+=SHORTNAMELABEL labels+=SHORTNAMELABEL*)
	 */
	protected void sequence_SHORTNAME(ISerializationContext context, SHORTNAME semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UNIT returns SIUNIT
	 *     NAMEDUNIT returns SIUNIT
	 *     SIUNIT returns SIUNIT
	 *
	 * Constraint:
	 *     (prefix=SIPREFIXType? name=SIUNITNAMEType dimensions=DIMENSIONALEXPONENTS?)
	 */
	protected void sequence_SIUNIT(ISerializationContext context, SIUNIT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SOURCEDOCUMENT returns SOURCEDOCUMENT
	 *     SOURCEDOCUMENT_Impl returns SOURCEDOCUMENT
	 *
	 * Constraint:
	 *     {SOURCEDOCUMENT}
	 */
	protected void sequence_SOURCEDOCUMENT_Impl(ISerializationContext context, SOURCEDOCUMENT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DICVALUE returns STRINGDICVALUE
	 *     STRINGDICVALUE returns STRINGDICVALUE
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         status=EString? 
	 *         valueMeaningId=EString? 
	 *         valueCode=EString 
	 *         preferredName=PREFERREDNAME 
	 *         synonymousNames=SYNONYMOUSNAME? 
	 *         shortName=SHORTNAME? 
	 *         icon=GRAPHICS? 
	 *         sourceDocOfDefinition=SOURCEDOCUMENT? 
	 *         definition=TEXT? 
	 *         isDeprecatedInterpretation=TEXT?
	 *     )
	 */
	protected void sequence_STRINGDICVALUE(ISerializationContext context, STRINGDICVALUE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOMAINCONSTRAINT returns STRINGPATTERNCONSTRAINT
	 *     STRINGPATTERNCONSTRAINT returns STRINGPATTERNCONSTRAINT
	 *
	 * Constraint:
	 *     pattern=EString
	 */
	protected void sequence_STRINGPATTERNCONSTRAINT(ISerializationContext context, STRINGPATTERNCONSTRAINT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getSTRINGPATTERNCONSTRAINT_Pattern()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getSTRINGPATTERNCONSTRAINT_Pattern()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTRINGPATTERNCONSTRAINTAccess().getPatternEStringParserRuleCall_3_0(), semanticObject.getPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DOMAINCONSTRAINT returns STRINGSIZECONSTRAINT
	 *     STRINGSIZECONSTRAINT returns STRINGSIZECONSTRAINT
	 *
	 * Constraint:
	 *     {STRINGSIZECONSTRAINT}
	 */
	protected void sequence_STRINGSIZECONSTRAINT(ISerializationContext context, STRINGSIZECONSTRAINT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     STRINGS returns STRINGS
	 *
	 * Constraint:
	 *     (values+=EString values+=EString*)
	 */
	protected void sequence_STRINGS(ISerializationContext context, STRINGS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns STRINGTYPE
	 *     STRINGTYPE returns STRINGTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_STRINGTYPE(ISerializationContext context, STRINGTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DOMAINCONSTRAINT returns SUBCLASSCONSTRAINT
	 *     SUBCLASSCONSTRAINT returns SUBCLASSCONSTRAINT
	 *
	 * Constraint:
	 *     subclasses=CLASSESREFERENCE
	 */
	protected void sequence_SUBCLASSCONSTRAINT(ISerializationContext context, SUBCLASSCONSTRAINT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getSUBCLASSCONSTRAINT_Subclasses()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getSUBCLASSCONSTRAINT_Subclasses()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSUBCLASSCONSTRAINTAccess().getSubclassesCLASSESREFERENCEParserRuleCall_3_0(), semanticObject.getSubclasses());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SUBSET returns SUBSET
	 *
	 * Constraint:
	 *     {SUBSET}
	 */
	protected void sequence_SUBSET(ISerializationContext context, SUBSET semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SUPPLIERREFERENCE returns SUPPLIERREFERENCE
	 *
	 * Constraint:
	 *     supplierRef=EString
	 */
	protected void sequence_SUPPLIERREFERENCE(ISerializationContext context, SUPPLIERREFERENCE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getSUPPLIERREFERENCE_SupplierRef()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getSUPPLIERREFERENCE_SupplierRef()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSUPPLIERREFERENCEAccess().getSupplierRefEStringParserRuleCall_3_0(), semanticObject.getSupplierRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SUPPLIER returns SUPPLIER
	 *
	 * Constraint:
	 *     (
	 *         isDeprecated?='isDeprecated'? 
	 *         dateOfOriginalDefinition=EString? 
	 *         dateOfCurrentVersion=EString? 
	 *         dateOfCurrentRevision=EString? 
	 *         revision=EString 
	 *         status=EString? 
	 *         internalLocation=EString? 
	 *         streetNumber=EString? 
	 *         street=EString? 
	 *         postalBox=EString? 
	 *         town=EString? 
	 *         region=EString? 
	 *         postalCode=EString? 
	 *         country=EString? 
	 *         facsimileNumber=EString? 
	 *         telephoneNumber=EString? 
	 *         electronicMailAddress=EString? 
	 *         telexNumber=EString? 
	 *         id=EString 
	 *         isDeprecatedInterpretation=TEXT? 
	 *         org=ORGANIZATION
	 *     )
	 */
	protected void sequence_SUPPLIER(ISerializationContext context, SUPPLIER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SYNONYMOUSNAMELABEL returns SYNONYMOUSNAMELABEL
	 *
	 * Constraint:
	 *     (value=EString? countryCode=EString? languageCode=EString?)
	 */
	protected void sequence_SYNONYMOUSNAMELABEL(ISerializationContext context, SYNONYMOUSNAMELABEL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SYNONYMOUSNAME returns SYNONYMOUSNAME
	 *
	 * Constraint:
	 *     (labels+=SYNONYMOUSNAMELABEL labels+=SYNONYMOUSNAMELABEL*)?
	 */
	protected void sequence_SYNONYMOUSNAME(ISerializationContext context, SYNONYMOUSNAME semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SYNONYMOUSSYMBOLS returns SYNONYMOUSSYMBOLS
	 *
	 * Constraint:
	 *     (mathematicalStrings+=MATHEMATICALSTRING mathematicalStrings+=MATHEMATICALSTRING*)
	 */
	protected void sequence_SYNONYMOUSSYMBOLS(ISerializationContext context, SYNONYMOUSSYMBOLS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     System returns System
	 *
	 * Constraint:
	 *     (
	 *         isComplete?='isComplete'? 
	 *         name=EString 
	 *         updateAgreement=EString? 
	 *         updates=DICTIONARYREFERENCE? 
	 *         referencedDictionaries=DICTIONARIESREFERENCE? 
	 *         responsibleSupplier=SUPPLIERREFERENCE? 
	 *         containedClasses=CONTAINEDCLASSES? 
	 *         aPosterioriSemanticRelationships=APOSTERIORISEMANTICRELATIONSHIPS? 
	 *         containedSuppliers=CONTAINEDSUPPLIERS 
	 *         containedProperties=CONTAINEDPROPERTIES? 
	 *         containedDocuments=CONTAINEDDOCUMENTS? 
	 *         containedDatatypes=CONTAINEDDATATYPES? 
	 *         ownedApplication=Application
	 *     )
	 */
	protected void sequence_System(ISerializationContext context, epml.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TEXT returns TEXT
	 *
	 * Constraint:
	 *     (texts+=GENERALTEXT texts+=GENERALTEXT*)
	 */
	protected void sequence_TEXT(ISerializationContext context, TEXT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns TIMEDATATYPE
	 *     TIMEDATATYPE returns TIMEDATATYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_TIMEDATATYPE(ISerializationContext context, TIMEDATATYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns TRANSLATABLESTRINGTYPE
	 *     TRANSLATABLESTRINGTYPE returns TRANSLATABLESTRINGTYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_TRANSLATABLESTRINGTYPE(ISerializationContext context, TRANSLATABLESTRINGTYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TRANSLATIONDATA returns TRANSLATIONDATA
	 *
	 * Constraint:
	 *     (translationRevision=EString dateOfCurrentTranslationRevision=EString? language=LANGUAGE responsibleTranslator=SUPPLIERREFERENCE)
	 */
	protected void sequence_TRANSLATIONDATA(ISerializationContext context, TRANSLATIONDATA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TRANSLATION returns TRANSLATION
	 *
	 * Constraint:
	 *     (translationDatas+=TRANSLATIONDATA translationDatas+=TRANSLATIONDATA*)
	 */
	protected void sequence_TRANSLATION(ISerializationContext context, TRANSLATION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UNIT returns UNIT
	 *     UNIT_Impl returns UNIT
	 *
	 * Constraint:
	 *     {UNIT}
	 */
	protected void sequence_UNIT_Impl(ISerializationContext context, UNIT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ANYTYPE returns URITYPE
	 *     URITYPE returns URITYPE
	 *
	 * Constraint:
	 *     (valueFormat=EString? constraints=DOMAINCONSTRAINTS?)
	 */
	protected void sequence_URITYPE(ISerializationContext context, URITYPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VCVRANGE returns VCVRANGE
	 *
	 * Constraint:
	 *     (viewControlVariableRanges+=VIEWCONTROLVARIABLERANGE viewControlVariableRanges+=VIEWCONTROLVARIABLERANGE*)
	 */
	protected void sequence_VCVRANGE(ISerializationContext context, VCVRANGE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VIEWCONTROLVARIABLERANGE returns VIEWCONTROLVARIABLERANGE
	 *
	 * Constraint:
	 *     parameterType=PROPERTYREFERENCE
	 */
	protected void sequence_VIEWCONTROLVARIABLERANGE(ISerializationContext context, VIEWCONTROLVARIABLERANGE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getVIEWCONTROLVARIABLERANGE_ParameterType()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Isostdisois_13584_32ed_1techxmlschemaontomlSimplifiedPackage.eINSTANCE.getVIEWCONTROLVARIABLERANGE_ParameterType()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVIEWCONTROLVARIABLERANGEAccess().getParameterTypePROPERTYREFERENCEParserRuleCall_3_0(), semanticObject.getParameterType());
		feeder.finish();
	}
	
	
}
