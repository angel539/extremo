/**
 * generated by Xtext 2.12.0
 */
package uam.extremo.casestudy.epmltext.formatting2;

import com.google.inject.Inject;
import epml.Application;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.APOSTERIORISEMANTICRELATIONSHIPS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDCLASSES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDDATATYPES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDDOCUMENTS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDPROPERTIES;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.CONTAINEDSUPPLIERS;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DICTIONARIESREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.DICTIONARYREFERENCE;
import isostdisois_13584_32ed_1techxmlschemaontomlSimplified.SUPPLIERREFERENCE;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import uam.extremo.casestudy.epmltext.services.EPMLTextGrammarAccess;

@SuppressWarnings("all")
public class EPMLTextFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EPMLTextGrammarAccess _ePMLTextGrammarAccess;
  
  protected void _format(final epml.System system, @Extension final IFormattableDocument document) {
    document.<DICTIONARYREFERENCE>format(system.getUpdates());
    document.<DICTIONARIESREFERENCE>format(system.getReferencedDictionaries());
    document.<SUPPLIERREFERENCE>format(system.getResponsibleSupplier());
    document.<CONTAINEDCLASSES>format(system.getContainedClasses());
    document.<APOSTERIORISEMANTICRELATIONSHIPS>format(system.getAPosterioriSemanticRelationships());
    document.<CONTAINEDSUPPLIERS>format(system.getContainedSuppliers());
    document.<CONTAINEDPROPERTIES>format(system.getContainedProperties());
    document.<CONTAINEDDOCUMENTS>format(system.getContainedDocuments());
    document.<CONTAINEDDATATYPES>format(system.getContainedDatatypes());
    document.<Application>format(system.getOwnedApplication());
  }
  
  protected void _format(final DICTIONARIESREFERENCE dICTIONARIESREFERENCE, @Extension final IFormattableDocument document) {
    EList<DICTIONARYREFERENCE> _dictionarys = dICTIONARIESREFERENCE.getDictionarys();
    for (final DICTIONARYREFERENCE dICTIONARYREFERENCE : _dictionarys) {
      document.<DICTIONARYREFERENCE>format(dICTIONARYREFERENCE);
    }
  }
  
  public void format(final Object system, final IFormattableDocument document) {
    if (system instanceof XtextResource) {
      _format((XtextResource)system, document);
      return;
    } else if (system instanceof epml.System) {
      _format((epml.System)system, document);
      return;
    } else if (system instanceof DICTIONARIESREFERENCE) {
      _format((DICTIONARIESREFERENCE)system, document);
      return;
    } else if (system instanceof EObject) {
      _format((EObject)system, document);
      return;
    } else if (system == null) {
      _format((Void)null, document);
      return;
    } else if (system != null) {
      _format(system, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(system, document).toString());
    }
  }
}
